name: Run OmniThinker on Tag

on:
  issue_comment:
    types: [created]

concurrency:
  group: omnithinker
  cancel-in-progress: true

jobs:
  run:
    if: contains(github.event.comment.body, '@omnithinker:')
    runs-on: ubuntu-latest
    container:
      image: continuumio/miniconda3:4.12.0
    steps:
      - name: Install jq
        run: apt-get update && apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update Conda and Set Python 3.11
        run: |
          conda update -n base conda -y
          conda create -n OmniThink python=3.11 -y

      - name: Install requirements
        run: |
          conda run -n OmniThink pip install -r requirements.txt

      - name: Extract Topic
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          TOPIC=$(python -c "import sys; body = sys.argv[1]; tag = '@omnithinker:'; print(body.split(tag)[1].split('\n')[0].strip() if tag in body else '')" "$COMMENT_BODY")
          echo "TOPIC=$TOPIC" >> $GITHUB_ENV

      - name: Check Topic
        if: env.TOPIC == ''
        run: |
          echo "Please provide a topic after @omnithinker:"
          PAYLOAD=$(jq -n --arg body "Please provide a topic after @omnithinker:" '{body: $body}')
          curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -d "$PAYLOAD" "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          exit 1

      - name: Fetch Context
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          REPO=${{ github.event.repository.full_name }}
          API_URL="https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER"
          CONTEXT=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL" | jq -r '.title + " " + (.body // "")')
          echo "CONTEXT=$CONTEXT" >> $GITHUB_ENV

      - name: Set Final Topic
        run: |
          FINAL_TOPIC="Context: ${CONTEXT}\nQuestion: ${TOPIC}\nGenerate an article based on this context and question."
          echo "FINAL_TOPIC=$FINAL_TOPIC" >> $GITHUB_ENV

      - name: Run OmniThinker
        env:
          LM_KEY: ${{ secrets.LM_KEY }}
          SEARCHKEY: ${{ secrets.SEARCHKEY }}
        run: |
          conda run -n OmniThink python src/omni_think.py "${FINAL_TOPIC}"

      - name: Check Article Generation
        run: |
          if [ ! -f results/article.md ] || [ ! -s results/article.md ]; then
            echo "Error: Article generation failed or produced an empty file."
            PAYLOAD=$(jq -n --arg body "Error: Article generation failed." '{body: $body}')
            curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -d "$PAYLOAD" "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
            exit 1
          fi

      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: omnithink_results
          path: results/*

      - name: Prepare Comment
        run: |
          ARTICLE=$(cat results/article.md)
          if [ ${#ARTICLE} -gt 65500 ]; then
            COMMENT="**Generated by OmniThinker**\n\nArticle exceeds GitHub comment limit. [Download full article](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          else
            COMMENT="**Generated by OmniThinker**\n\n$ARTICLE"
          fi
          echo "COMMENT<<EOF" >> $GITHUB_ENV
          echo "$COMMENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Comment
        run: |
          PAYLOAD=$(jq -n --arg body "${{ env.COMMENT }}" '{body: $body}')
          curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -d "$PAYLOAD" "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
